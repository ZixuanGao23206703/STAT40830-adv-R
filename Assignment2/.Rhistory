install.packages("devtools")
install.packages("roxygen2")
library(devtools)
install.packages("roxygen2")
install.packages("devtools")
library(devtools)
has_devel()
create("myRpackage")
available::available("myRpackage")
install.packages("available")
available::available("myRpackage")
install.packages("data.table")
# install.packages("data.table")
library(data.table)
files <- c('hdro_indicators_irl.csv', 'hdro_indicators_jpn.csv', 'hdro_indicators_chn.csv')
#' Read and Process Human Development Indicators Data
#'
#' This function reads the Human Development Indicators data from a CSV file,
#' processes the data by setting appropriate column types, and combines multiple datasets.
#'
#' @param files A character vector of file paths to the CSV files.
#' @return An object of class `hdi_data`.
#' @export
read_hdi <- function(files) {
# Helper function to read and process each file
process_file <- function(file) {
data <- fread(file)
data <- data[-1] # Remove the first row
data[, year := as.integer(year)]
data[, value := as.numeric(value)]
data[, country_code := as.factor(country_code)]
data[, country_name := as.factor(country_name)]
data[, indicator_id := as.factor(indicator_id)]
data[, indicator_name := as.factor(indicator_name)]
data[, index_id := as.factor(index_id)]
data[, index_name := as.factor(index_name)]
return(data)
}
# Read and process all files
data_list <- lapply(files, process_file)
# Combine all datasets into one data.table
combined_data <- rbindlist(data_list)
# Create an object of class `hdi_data`
structure(list(data = combined_data), class = "hdi_data")
}
print(combined_data)
# 使用 read_hdi 函数读取并处理数据
hdi_data <- read_hdi(files)
# 查看处理后的数据
print(hdi_data$data)
# 或者查看数据的前几行
head(hdi_data$data)
file.copy("read_csv.R","./myRpackage/R/read_csv.R")
file.exists("read_csv.R")
dir.exists("./myRpackage/R/")
file.copy("read_csv.R","./myRpackage/R/read_csv.R")
file.copy("read_csv.R","./myRpackage/R/readcsv.R")
file.copy("readcsv.R","./myRpackage/R/readcsv.R")
file.copy("readcsv.R","./myRpackage/R/readcsv.R")
file.copy("readcsv.R","./myRpackage/R/readcsv.R")
dir.create("./myRpackage/R/", recursive = TRUE)
file.exists("readcsv.R")
file.exists("readcsv.R")
file.copy("readcsv.R","./myRpackage/R/readcsv.R")
file.exists("readcsv.R")
file.copy("readcsv.R","./myRpackage/R/readcsv.R")
# install.packages("data.table")
library(data.table)
#' Read and Process Human Development Indicators Data
#'
#' This function reads the Human Development Indicators data from a CSV file,
#' processes the data by setting appropriate column types, and combines multiple datasets.
#'
#' @param files A character vector of file paths to the CSV files.
#' @return An object of class `hdi_data`.
#' @export
#' @example
#' files <- c('hdro_indicators_irl.csv', 'hdro_indicators_jpn.csv', 'hdro_indicators_chn.csv')
#' hdi_data <- readcsv(files)
#' head(hdi_data$data)
readcsv <- function(files) {
# Helper function to read and process each file
process_file <- function(file) {
data <- fread(file)
data <- data[-1] # Remove the first row
data[, year := as.integer(year)]
data[, value := as.numeric(value)]
data[, country_code := as.factor(country_code)]
data[, country_name := as.factor(country_name)]
data[, indicator_id := as.factor(indicator_id)]
data[, indicator_name := as.factor(indicator_name)]
data[, index_id := as.factor(index_id)]
data[, index_name := as.factor(index_name)]
return(data)
}
# Read and process all files
data_list <- lapply(files, process_file)
# Combine all datasets into one data.table
combined_data <- rbindlist(data_list)
# The output from the main function must belong to a new class
structure(list(data = combined_data), class = "hdi_data")
}
devtools::ducument()
build()
has_devel()
create("myRpackage")
usethis::use_testthat(3)
usethis::use_testthat(3)
usethis::use_testthat(3)
usethis::use_testthat(3)
setwd("myRpackage")
usethis::use_testthat(3)
usethis::use_vignette("myRpackage")
This is how the function works:
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
setwd("myRpackage/vignette")
devtools::build_vignettes()
setwd("myRpackage/vignettes")
devtools::build_vignettes()
usethis::use_vignette("myRpackage")
devtools::build_vignettes()
devtools::ducument()
library(devtools)
devtools::ducument()
devtools::document()
setwd("myRpackage")
devtools::document()
library(quarto)
getwd()
library(quarto)
quarto::quarto_version()
devtools::build_manual()
list.files("G:/我的云端硬盘/Semester_3/STAT40830-Adv Data Prog with R (online)/Assignment2/myRpackage/man")
quarto::quarto_version()
devtools::build_manual()
# install.packages("devtools")
# install.packages("roxygen2")
# install.packages("available")
library(devtools)
library(roxygen2)
install.packages("devtools")
install.packages("roxygen2")
install.packages("roxygen2")
install.packages("available")
# install.packages("devtools")
# install.packages("roxygen2")
# install.packages("available")
library(devtools)
library(roxygen2)
library(available)
has_devel()
has_devel()
create("myRpackage")
available::available("myRpackage")
devtools::document()
getwd()
devtools::document()
setwd("G:/我的云端硬盘/Semester_3/STAT40830-Adv Data Prog with R (online)/Assignment2/myRpackage")
getwd()
devtools::document()
rm(list = c("read_hdi"))
devtools::document()
dovtools::load_all()
devtools::load_all()
usethis::use_vignette("myRpackage")
getwd()
usethis::use_vignette("myRpackage")
devtools::build()
getwd()
devtools::build()
devtools::build_vignettes()
getwd()
devtools::build_vignettes()
devtools::build_manual()
getwd()
devtools::build_manual()
devtools::load_all()
devtools::document()
devtools::build_manual()
devtools::build_manual()
getwd()
devtools::build_manual()
setwd("G:/我的云端硬盘/Semester_3/STAT40830-Adv Data Prog with R (online)/Assignment2")
devtools::build_manual()
geted()
getwd()
devtools::build_manual()
# install.packages("devtools")
# install.packages("roxygen2")
# install.packages("available")
library(devtools)
library(roxygen2)
library(available)
has_devel()
create("myRpackage")
sessionInfo()
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
selectInput("colour",
"Select a colour:",
list('colour' = c("red", "green", "blue")))
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = input$colour, border = 'white',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
})
}
# Run the application
shinyApp(ui = ui, server = server)
