#
#
library(shiny)
library(tidyverse)
library(data.table)
getwd()
read_data <- function(filename) {
data <- fread(filename)
return(data)
}
data_files <- list.files(pattern = "hdro_indicators_.*\\.csv", full.names = FALSE)
if(length(data_files) == 0) {
stop("没有找到匹配的文件，请检查文件路径和文件名格式")
}
countries <- str_remove(basename(data_files), "hdro_indicators_|\\.csv")
# 确认国家名称是否被正确提取
print(countries)
countries <- str_remove(basename(data_files), "hdro_indicators_|\\.csv")
# 确认国家名称是否被正确提取
print(countries)
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel("人类发展指标数据"),
sidebarLayout(
sidebarPanel(
selectInput("country", "选择国家", choices = countries, selected = countries[1], multiple = TRUE),
uiOutput("column_selector"),
sliderInput("rows", "选择行数", min = 1, max = 100, value = 10),
fileInput("file", "上传额外的数据集", accept = ".csv"),
actionButton("update", "更新数据")
),
mainPanel(
h3(textOutput("title")),
tableOutput("table"),
plotOutput("plot1"),
plotOutput("plot2")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output, session) {
selected_data <- reactive({
req(input$country)
data <- bind_rows(lapply(input$country, function(country) {
initial_data[[country]]
}))
if (!is.null(input$file)) {
additional_data <- fread(input$file$datapath)
data <- bind_rows(data, additional_data)
}
data
})
output$column_selector <- renderUI({
data <- selected_data()
checkboxGroupInput("columns", "选择列", choices = colnames(data), selected = colnames(data)[1:5])
})
output$title <- renderText({
paste("人类发展指标数据 -", paste(input$country, collapse = ", "))
})
output$table <- renderTable({
data <- selected_data()
data <- data[, ..input$columns]
head(data, input$rows)
})
output$plot1 <- renderPlot({
data <- selected_data()
ggplot(data, aes(x = Year, y = HDI)) + geom_line() + theme_minimal()
})
output$plot2 <- renderPlot({
data <- selected_data()
ggplot(data, aes(x = Year, y = Life_Expectancy, color = factor(Country))) + geom_point() + theme_minimal()
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#
#
library(shiny)
library(tidyverse)
library(data.table)
read_data <- function(filename) {
data <- fread(filename)
data[, value := as.numeric(value)]
return(data)
}
runApp()
runApp()
runApp()
raw_data <- fread(filename)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("RColorBrewer")
library(RColorBrewer)
runApp()
runApp()
runApp()
runApp()
shiny::runApp('G:/我的云端硬盘/Semester_3/STAT40830-Adv Data Prog with R (online)/Final Project/1')
runApp('G:/我的云端硬盘/Semester_3/STAT40830-Adv Data Prog with R (online)/Final Project/1')
runApp('G:/我的云端硬盘/Semester_3/STAT40830-Adv Data Prog with R (online)/Final Project/1')
runApp('G:/我的云端硬盘/Semester_3/STAT40830-Adv Data Prog with R (online)/Final Project/1')
runApp('G:/我的云端硬盘/Semester_3/STAT40830-Adv Data Prog with R (online)/Final Project/1')
runApp()
runApp('G:/我的云端硬盘/Semester_3/STAT40830-Adv Data Prog with R (online)/Final Project/1')
runApp('G:/我的云端硬盘/Semester_3/STAT40830-Adv Data Prog with R (online)/Final Project/1')
